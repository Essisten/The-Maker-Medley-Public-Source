<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGeezerBKLines</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>300</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tex = sprite_get_texture(sprGeezerBKLines, 0);
count = global.count;
frozen = false;  // boss ending freeze-frame

if (instance_number(object_index) &gt; 1){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!frozen){
    count = global.count;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!(room == rGeezer01 || room == rGeezerHitchcock)){
    instance_destroy();
}
frozen = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// calculations and setup
texture_set_repeat(true);
var _xbuffer = 800, _ybuffer = 608;
var _l = 0, _r = (800+2*_xbuffer)/32;
var _t = 0, _b = (608+2*_ybuffer)/32;

var _yoff;
// First (back) layer, down
_yoff = -(count mod 32)/32;
draw_set_alpha(  0.5 + 0.2*sin(count*pi/64)  );

draw_primitive_begin_texture(pr_trianglelist, tex);
draw_vertex_texture(0-_xbuffer, 0-_ybuffer,   _l, _t + _yoff);  // TL
draw_vertex_texture(800+_xbuffer, 0-_ybuffer,   _r, _t + _yoff);  // TR
draw_vertex_texture(800+_xbuffer, 608+_ybuffer,   _r, _b + _yoff);  // BR

draw_vertex_texture(800+_xbuffer, 608+_ybuffer,   _r, _b + _yoff);  // BR
draw_vertex_texture(0-_xbuffer, 608+_ybuffer,   _l, _b + _yoff);  // BL
draw_vertex_texture(0-_xbuffer, 0-_ybuffer,   _l, _t + _yoff);  // TL
draw_primitive_end();

// Second (front) layer, up
_yoff = (count mod 32)/32;
draw_set_alpha(  0.72 * (sin(pi* (count mod 108)/108))  );

draw_primitive_begin_texture(pr_trianglelist, tex);
draw_vertex_texture(0-_xbuffer, 0-_ybuffer,   _l, _t + _yoff);  // TL
draw_vertex_texture(800+_xbuffer, 0-_ybuffer,   _r, _t + _yoff);  // TR
draw_vertex_texture(800+_xbuffer, 608+_ybuffer,   _r, _b + _yoff);  // BR

draw_vertex_texture(800+_xbuffer, 608+_ybuffer,   _r, _b + _yoff);  // BR
draw_vertex_texture(0-_xbuffer, 608+_ybuffer,   _l, _b + _yoff);  // BL
draw_vertex_texture(0-_xbuffer, 0-_ybuffer,   _l, _t + _yoff);  // TL
draw_primitive_end();

draw_set_alpha(1);
texture_set_repeat(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
