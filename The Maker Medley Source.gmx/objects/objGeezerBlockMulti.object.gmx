<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGeezerBlock</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>objGeezerBlock</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// efficiency boost for Pac-Man
event_inherited();

blockAlphaArr[0, 0] = 0;
blockDelayArr[0, 0] = 0;
blockIndexArr[0, 0] = 0;  // subimg
pacLeftArr[0, 0] = 0;
pacTopArr[0, 0] = 0;
alarm[0] = 1;
init = false;  // see alarm[0]
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Initialize
for (var i=0; i&lt;image_xscale; i++;){
    for (var j=0; j&lt;image_yscale; j++;){
        blockAlphaArr[i, j] = random_range(0.35, 2.1);
        blockDelayArr[i, j] = irandom_range(5, 7);
    }
}
init = true;
alarm[0] = -1;  // if called manually
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
// flickering block array
if (init){
    for (var i=0; i&lt;image_xscale; i++;){
        for (var j=0; j&lt;image_yscale; j++;){
            if (blockDelayArr[i, j] &lt;= 1){
                blockAlphaArr[i, j] = random_range(0.35, 2.1);
                blockDelayArr[i, j] = irandom_range(5, 7);
            }else{
                blockDelayArr[i, j] --;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (init){
    var _x = (x+drawXOff), _y = (y+drawYOff);
    // Geezer tiles
    for (var i=0; i&lt;image_xscale; i++;){
        for (var j=0; j&lt;image_yscale; j++;){
            draw_sprite_ext(sprite_index, image_index, _x+32*i, _y+32*j, 1, 1, image_angle, image_blend, blockAlphaArr[i, j]);
        }
    }
    // Overlay tiles
    if ((blockSprite != sprGeezerBlock &amp;&amp; sprite_exists(blockSprite)) || pacman){
        if (pacman){
            for (var i=0; i&lt;image_xscale; i++;){
                for (var j=0; j&lt;image_yscale; j++;){
                    draw_background_part_ext(tlGeezerPacman, pacLeftArr[i, j], pacTopArr[i, j], 32, 32, _x+32*i, _y+32*j, 1, 1, c_white, min(blockAlphaArr[i, j], 1)*blockAlphaMult);
                }
            }
        }else{
            for (var i=0; i&lt;image_xscale; i++;){
                for (var j=0; j&lt;image_yscale; j++;){
                    draw_sprite_ext(blockSprite, blockIndexArr[i, j], _x+32*i, _y+32*j, 1, 1, 0, c_white, min(blockAlphaArr[i, j], 1)*blockAlphaMult);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
