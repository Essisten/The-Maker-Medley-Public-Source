<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTriggerMask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 22;
//drawTiles = true;
tileAlpha = 0;
active = false;

speedTimer = -1;
speedTimerMax = 350;
speedGlow = 0;
speedColor = make_color_rgb(0, 205, 118);
playerGlowSurf = -4;

//  BEGIN Scatter State  \\
// Added in v1.3.0
totalTime = 0;
scatter = false;

var _time; _time = 25;  // 25 seconds to account for ghost appearance
scatterTime[0] = _time*50;  // start scatter 1
if (!buff()){
    _time = 5;  // BUFF: Scatter 1 time is 5 seconds
}else{
    _time = 7;
}
scatterTime[1] = scatterTime[0] + _time*50;  // end scatter 1

_time = 15;
if (buff()){
    _time += 5;  // BUFF: Chase 2 time is longer
}
scatterTime[2] = scatterTime[1] + _time*50;  // start scatter 2
_time = 5;
scatterTime[3] = scatterTime[2] + _time*50;

if (!buff()){
    _time = 20;
    scatterTime[4] = scatterTime[3] + _time*50;  // start scatter 2
    _time = 5;
    scatterTime[5] = scatterTime[4] + _time*50;
}

scatterTimeIndex = 0;
scatterTimeLen = array_length_1d(scatterTime);
//  END Scatter State  \\


if (!buff()){
    scrGiveShields(1);
}else{
    speedTimerMax -= 50;  // shorten timer  (buff reduced from 150 to 50 in v1.3.0)
}

event_user(3);  // initialize Pac-Man tile array
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.infJump = false;
if (surface_exists(playerGlowSurf)) surface_free(playerGlowSurf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Transition from Pacman to normal room
with (objExpandFade) instance_destroy()
with (objBullet) instance_destroy()
audio_play_sound(sndTouhouExplosion, 0, 0);
with (objGeezerBlock) instance_destroy();
with (objBlock) instance_destroy();
with (objGeezerPacGhost) instance_destroy();
global.shield = 0;
with (objMakerPShield) instance_destroy();
with (objGeezerBoss) {waiting = false;image_blend = c_white;}

// Revised v1.3.0 to boost performance
var _x, _y, _scale;
var _inst;
// floor
_x = 32; _y = 576; _scale = 23;
_inst = instance_create(_x, _y, objGeezerBlockMulti);
_inst.image_xscale = _scale;
with (instance_create(_x, _y, objBlock)){image_xscale = _scale;}
// left
_x = 0; _y = 384; _scale = 17;
_inst = instance_create(_x, _y, objGeezerBlockMulti);
_inst.image_yscale = _scale;
with (instance_create(_x, _y, objBlock)){image_yscale = _scale;}
instance_create(_x, _y-32, objMakerSpikeUp);
// right
_x = 768;
_inst = instance_create(_x, _y, objGeezerBlockMulti);
_inst.image_yscale = _scale;
with (instance_create(_x, _y, objBlock)){image_yscale = _scale;}
instance_create(_x, _y-32, objMakerSpikeUp);

with (objPlayer){
    x = 400;
    y = 567;
    xprevious = x;
    yprevious = y;
}

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objBlock) instance_destroy();
with (objMakerSpikeUp) instance_destroy();
with (objGeezerLaser) instance_destroy();
with (objGeezerBlock) if (y &lt; 608) instance_destroy();
with (objPlayer){
    x = 400;
    y = 151;
    xprevious = x;
    yprevious = y;
}

event_user(0); //coins
event_user(1); //blocks

// Revised v1.3.0 - Performance
var _inst;
with (objBlock){
    if (bbox_left &gt;= 0 &amp;&amp; bbox_right &lt; 800 &amp;&amp; bbox_top &gt;= 0 &amp;&amp; bbox_bottom &lt; 608){
        _inst = instance_create(x, y, objGeezerBlockMulti);
        _inst.image_xscale = image_xscale;
        _inst.image_yscale = image_yscale;
    }
}

// Platform
with (instance_create(384, 288, objPlatform)){
    visible = false;
}
// tileset (changed v1.3.0)

// set up Pac-Man tiles
var _l, _t, _val;
with (objGeezerBlockMulti){
    _l = (x div 32);
    _t = (y div 32);
    pacman = true;
    blockAlphaMult = 1;
    
    for (var i=0; i&lt;image_xscale; i++;){
        for (var j=0; j&lt;image_yscale; j++;){
            _val = other.block[_l+i, _t+j];
            pacLeftArr[i, j] = 32*(_val mod 8);
            pacTopArr[i, j] = 32*(_val div 8);
        }
    }
    pacman = true;
    blockAlphaMult = 1;
}

with (objGeezerPacGhost){
    alarm[0] = 30 + 70*color;
    showLetter = true;  // color blind accessability
}

if (instance_exists(objPlayer)){
    global.infJump = true; //Player has Infinite Jumps
    with (instance_create(objPlayer.x, objPlayer.y - 30, objMakerMessage)){
        message = "You can jump infinitely";
    }
}
instance_create(-32, 256, objGeezerPacScreenWrap);
instance_create(800, 256, objGeezerPacScreenWrap);

with (objGeezerBoss){image_blend = c_dkgray;}  // only affects screen
scrIdentAttack(rGeezer01, 1);
active = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (instance_create(0, 0, objScreenFade)){
    color = c_white;
    fade = 0;
    alpha = 0;
    fadeIn = 0.25;
    alarm[0] = 5;
    fadeOut = 0.125;
}
audio_play_sound(sndTouhouExplosion, 0, 0);
alarm[1] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 1 - Boost Pellets
if (speedTimer &gt; 0){
    if (instance_exists(objPlayer)){
        speedTimer --;
        
        var _glowExpandLen = 25;
        var _glowExpandTime = (speedTimerMax-_glowExpandLen);
        var _glowShrinkFastTime = 15;  // if the glow size is too close to 1, it won't really be visible. This accounts for that, while still keeping the shrink appearance smooth 
        var _glowShrinkFastAmt = (pi/8.5);  // how much should be left during the fast shrink speed
        if (speedTimer &gt;= _glowExpandTime){
            if (speedGlow &lt; pi/2){
                speedGlow += (pi/2)/(_glowExpandLen);  //the glow amt should not reset if the player collects another pellet. Instead, it should increase from where it is to the maximum amount (see `clamp` function belopw)
            }
        }else if (speedGlow &gt; 0){
            if (speedTimer &lt;= _glowShrinkFastTime){
                speedGlow -= _glowShrinkFastAmt/_glowShrinkFastTime;
            }else{
                speedGlow -= ((pi/2) - _glowShrinkFastAmt)/(_glowExpandTime - _glowShrinkFastTime);
            }
        }
        speedGlow = clamp(speedGlow, 0, pi/2);
        
        if (speedTimer &gt; 0){
            // double player's movement
            with (objPlayer){
                if (hspeed != 0){
                    if (!place_meeting(x+hspeed, y, objBlock)){
                        x += hspeed;  // *(_amt-1)  where _amt = 2
                    }else{
                        scrMoveContactObject(sign(hspeed), 0, abs(hspeed), objBlock);
                    }
                }
                if (vspeed != 0){
                    if (!place_meeting(x, y+vspeed, objBlock)){
                        y += vspeed;  // *(_amt-1)  where _amt = 2
                    }else{
                        scrMoveContactObject(0, sign(vspeed), abs(vspeed), objBlock);
                    }
                }
            }
        }else{
            audio_play_sound(sndMakerPowerDown, 0, 0);
        }
    }else{
        speedTimer = 0;
        audio_play_sound(sndMakerPowerDown, 0, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 2 - Scatter/Chase state timer
if (scatterTimeIndex &lt; scatterTimeLen){
    totalTime ++;
    if (totalTime &gt;= scatterTime[scatterTimeIndex]){
        scatter = !scatter;
        scatterTimeIndex ++;
    }
}else{
    scatter = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 3 - End Pac-Man section
if ((!instance_exists(objMakerCoin) &amp;&amp; !instance_exists(objGeezerPacPower)) &amp;&amp; active){  // || global.debugInfJump) &amp;&amp; active){
    with (instance_create(0, 0, objScreenFade)){
        color = c_white;
        fade = 0;
        alpha = 0;
        fadeIn = 0.25;
        fadeOut = 0.125;
        alarm[0] = 5;
    }
    with (objGeezerPacGhost) fade = true;
    alarm[2] = 5;
    active = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// v1.3.0 Pac-Man tile change
// Used to fill in the Pac-Man layout under Geezer blocks
var _max; _max = 25-1;
for (var i=_max; i&gt;=0; i--;){
    block[i, 18] = -1;  // initialize array
}

//0-49
block[00, 0] = 16;
block[01, 0] = 09;
block[02, 0] = 09;
block[03, 0] = 09;
block[04, 0] = 09;
block[05, 0] = 09;
block[06, 0] = 09;
block[07, 0] = 09;
block[08, 0] = 09;
block[09, 0] = 09;
block[10, 0] = 09;
block[11, 0] = 09;
block[12, 0] = 28;
block[13, 0] = 09;
block[14, 0] = 09;
block[15, 0] = 09;
block[16, 0] = 09;
block[17, 0] = 09;
block[18, 0] = 09;
block[19, 0] = 09;
block[20, 0] = 09;
block[21, 0] = 09;
block[22, 0] = 09;
block[23, 0] = 09;
block[24, 0] = 17;

block[0, 1] = 34;
block[12, 1] = 13;
block[24, 1] = 35;

//50-99
block[0, 2] = 34;
block[2, 2] = 00;
block[3, 2] = 01;
block[4, 2] = 02;
block[6, 2] = 00;
block[7, 2] = 01;
block[8, 2] = 01;
block[9, 2] = 01;
block[10, 2] = 02;
block[12, 2] = 13;
block[14, 2] = 00;
block[15, 2] = 01;
block[16, 2] = 01;
block[17, 2] = 01;
block[18, 2] = 02;
block[20, 2] = 00;
block[21, 2] = 01;
block[22, 2] = 02;
block[24, 2] = 35;

block[0, 3] = 34;
block[2, 3] = 08;
block[3, 3] = 09;
block[4, 3] = 10;
block[6, 3] = 08;
block[7, 3] = 09;
block[8, 3] = 09;
block[9, 3] = 09;
block[10, 3] = 10;
block[12, 3] = 21;
block[14, 3] = 08;
block[15, 3] = 09;
block[16, 3] = 09;
block[17, 3] = 09;
block[18, 3] = 10;
block[20, 3] = 08;
block[21, 3] = 09;
block[22, 3] = 10;
block[24, 3] = 35;

//100-149
block[0, 4] = 34;
block[24, 4] = 35;

block[0, 5] = 34;
block[2, 5] = 18;
block[3, 5] = 19;
block[4, 5] = 19;
block[5, 5] = 19;
block[6, 5] = 04;
block[8, 5] = 18;
block[9, 5] = 19;
block[10, 5] = 19;
block[11, 5] = 19;
block[12, 5] = 06;
block[13, 5] = 19;
block[14, 5] = 19;
block[15, 5] = 19;
block[16, 5] = 20;
block[18, 5] = 03;
block[19, 5] = 19;
block[20, 5] = 19;
block[21, 5] = 19;
block[22, 5] = 20;
block[24, 5] = 35;

//150-199
block[0, 6] = 34;
block[6, 6] = 13;
block[12, 6] = 13;
block[18, 6] = 13;
block[24, 6] = 35;

block[0, 7] = 37;
block[1, 7] = 19;
block[2, 7] = 19;
block[3, 7] = 19;
block[4, 7] = 20;
block[6, 7] = 14;
block[7, 7] = 19;
block[8, 7] = 19;
block[9, 7] = 19;
block[10, 7] = 20;
block[12, 7] = 21;
block[14, 7] = 18;
block[15, 7] = 19;
block[16, 7] = 19;
block[17, 7] = 19;
block[18, 7] = 15;
block[20, 7] = 18;
block[21, 7] = 19;
block[22, 7] = 19;
block[23, 7] = 19;
block[24, 7] = 36;

//200-249
//block[0, 8] = 34;
block[6, 8] = 13;
block[18, 8] = 13;
//block[24, 8] = 35;

block[0, 9] = 33;
block[1, 9] = 19;
block[2, 9] = 19;
block[3, 9] = 19;
block[4, 9] = 20;
block[6, 9] = 21;
block[8, 9] = 03;
block[9, 9] = 19;
block[10, 9] = 19;
block[11, 9] = 20;
//block[12, 9] = platform;
block[13, 9] = 18;
block[14, 9] = 19;
block[15, 9] = 19;
block[16, 9] = 04;
block[18, 9] = 21;
block[20, 9] = 18;
block[21, 9] = 19;
block[22, 9] = 19;
block[23, 9] = 19;
block[24, 9] = 32;

//250 - 299
block[0, 10] = 34;
block[8, 10] = 13;
block[16, 10] = 13;
block[24, 10] = 35;

block[0, 11] = 34;
block[2, 11] = 18;
block[3, 11] = 19;
block[4, 11] = 06;
block[5, 11] = 19;
block[6, 11] = 20;
block[8, 11] = 13;
block[16, 11] = 13;
block[18, 11] = 18;
block[19, 11] = 19;
block[20, 11] = 06;
block[21, 11] = 19;
block[22, 11] = 20;
block[24, 11] = 35;

//300-349
block[0, 12] = 34;
block[4, 12] = 13;
block[8, 12] = 11;
block[9, 12] = 19;
block[10, 12] = 19;
block[11, 12] = 19;
block[12, 12] = 19;
block[13, 12] = 19;
block[14, 12] = 19;
block[15, 12] = 19;
block[16, 12] = 12;
block[20, 12] = 13;
block[24, 12] = 35;

block[0, 13] = 30;
block[1, 13] = 01;
block[2, 13] = 02;
block[4, 13] = 13;
block[6, 13] = 05;
block[18, 13] = 05;
block[20, 13] = 13;
block[22, 13] = 00;
block[23, 13] = 01;
block[24, 13] = 31;

//350-399
block[0, 14] = 38;
block[1, 14] = 09;
block[2, 14] = 10;
block[4, 14] = 21;
block[6, 14] = 13;
block[8, 14] = 18;
block[9, 14] = 19;
block[10, 14] = 19;
block[11, 14] = 32;
block[12, 14] = 01;
block[13, 14] = 33;
block[14, 14] = 19;
block[15, 14] = 19;
block[16, 14] = 20;
block[18, 14] = 13;
block[20, 14] = 21;
block[22, 14] = 08;
block[23, 14] = 09;
block[24, 14] = 17;

block[0, 15] = 34;
block[6, 15] = 13;
block[11, 15] = 35;
block[12, 15] = 29;
block[13, 15] = 34;
block[18, 15] = 13;
block[24, 15] = 35;

//400-449
block[0, 16] = 34;
block[02, 16] = 18;
block[03, 16] = 19;
block[04, 16] = 19;
block[05, 16] = 19;
block[06, 16] = 07;
block[07, 16] = 19;
block[08, 16] = 19;
block[09, 16] = 20;
block[11, 16] = 08;
block[12, 16] = 09;
block[13, 16] = 10;
block[15, 16] = 18;
block[16, 16] = 19;
block[17, 16] = 19;
block[18, 16] = 07;
block[19, 16] = 19;
block[20, 16] = 19;
block[21, 16] = 19;
block[22, 16] = 20;
block[24, 16] = 35;

block[0, 17] = 34;
block[24, 17] = 35;
//450-499
block[0, 18] = 24;
block[1, 18] = 01;
block[2, 18] = 01;
block[3, 18] = 01;
block[4, 18] = 01;
block[5, 18] = 01;
block[6, 18] = 01;
block[7, 18] = 01;
block[8, 18] = 01;
block[9, 18] = 01;
block[10, 18] = 01;
block[11, 18] = 01;
block[12, 18] = 01;
block[13, 18] = 01;
block[14, 18] = 01;
block[15, 18] = 01;
block[16, 18] = 01;
block[17, 18] = 01;
block[18, 18] = 01;
block[19, 18] = 01;
block[20, 18] = 01;
block[21, 18] = 01;
block[22, 18] = 01;
block[23, 18] = 01;
block[24, 18] = 25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Code-generating code
/*if (file_exists(working_directory + "\pacmanblocks.txt")) file_delete(working_directory + "\pacmanblocks.txt");
file = file_text_open_append(working_directory + "\pacmanblocks.txt");
with (objBlock){
    file_text_write_string(other.file, "with (instance_create(" + string(x) + ", " + string(y) + ", objBlock)){image_xscale = " + string(image_xscale) +"; image_yscale = " + string(image_yscale) + ";}");
    file_text_writeln(other.file);
}
with (objMakerCoin){
    file_text_write_string(other.file, "instance_create(" + string(x+16) + ", " + string(y+16) + ", objMakerCoin);");
    file_text_writeln(other.file);
}
file_text_close(file);*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blocks
with (instance_create(416, 288, objBlock)){image_xscale = 4; image_yscale = 1;}
with (instance_create(256, 288, objBlock)){image_xscale = 4; image_yscale = 1;}
with (instance_create(512, 320, objBlock)){image_xscale = 1; image_yscale = 2;}
with (instance_create(256, 320, objBlock)){image_xscale = 1; image_yscale = 2;}
with (instance_create(768, 288, objBlock)){image_xscale = 1; image_yscale = 9;}
with (instance_create(0, 288, objBlock)){image_xscale = 1; image_yscale = 9;}
with (instance_create(384, 192, objBlock)){image_xscale = 1; image_yscale = 2;}
with (instance_create(352, 480, objBlock)){image_xscale = 3; image_yscale = 2;}
with (instance_create(256, 448, objBlock)){image_xscale = 9; image_yscale = 1;}
with (instance_create(128, 384, objBlock)){image_xscale = 1; image_yscale = 3;}
with (instance_create(64, 352, objBlock)){image_xscale = 5; image_yscale = 1;}
with (instance_create(32, 416, objBlock)){image_xscale = 2; image_yscale = 2;}
with (instance_create(192, 416, objBlock)){image_xscale = 1; image_yscale = 3;}
with (instance_create(64, 512, objBlock)){image_xscale = 8; image_yscale = 1;}
with (instance_create(704, 416, objBlock)){image_xscale = 2; image_yscale = 2;}
with (instance_create(480, 512, objBlock)){image_xscale = 8; image_yscale = 1;}
with (instance_create(576, 416, objBlock)){image_xscale = 1; image_yscale = 3;}
with (instance_create(640, 384, objBlock)){image_xscale = 1; image_yscale = 3;}
with (instance_create(576, 352, objBlock)){image_xscale = 5; image_yscale = 1;}
with (instance_create(256, 384, objBlock)){image_xscale = 9; image_yscale = 1;}
with (instance_create(32, 224, objBlock)){image_xscale = 4; image_yscale = 1;}
with (instance_create(640, 224, objBlock)){image_xscale = 4; image_yscale = 1;}
with (instance_create(640, 288, objBlock)){image_xscale = 4; image_yscale = 1;}
with (instance_create(32, 288, objBlock)){image_xscale = 4; image_yscale = 1;}
with (instance_create(448, 224, objBlock)){image_xscale = 4; image_yscale = 1;}
with (instance_create(576, 192, objBlock)){image_xscale = 1; image_yscale = 4;}
with (instance_create(576, 160, objBlock)){image_xscale = 5; image_yscale = 1;}
with (instance_create(256, 160, objBlock)){image_xscale = 9; image_yscale = 1;}
with (instance_create(224, 224, objBlock)){image_xscale = 4; image_yscale = 1;}
with (instance_create(192, 192, objBlock)){image_xscale = 1; image_yscale = 4;}
with (instance_create(64, 160, objBlock)){image_xscale = 5; image_yscale = 1;}
with (instance_create(640, 64, objBlock)){image_xscale = 3; image_yscale = 2;}
with (instance_create(448, 64, objBlock)){image_xscale = 5; image_yscale = 2;}
with (instance_create(192, 64, objBlock)){image_xscale = 5; image_yscale = 2;}
with (instance_create(384, 32, objBlock)){image_xscale = 1; image_yscale = 3;}
with (instance_create(64, 64, objBlock)){image_xscale = 3; image_yscale = 2;}
with (instance_create(0, 32, objBlock)){image_xscale = 1; image_yscale = 7;}
with (instance_create(768, 32, objBlock)){image_xscale = 1; image_yscale = 7;}
with (instance_create(0, 576, objBlock)){image_xscale = 25; image_yscale = 1;}
with (instance_create(0, 0, objBlock)){image_xscale = 25; image_yscale = 1;}

//Warp Tunnels
with (instance_create(-32, 224, objBlock)){image_xscale = 1; image_yscale = 1;}
with (instance_create(-32, 288, objBlock)){image_xscale = 1; image_yscale = 1;}
with (instance_create(800, 224, objBlock)){image_xscale = 1; image_yscale = 1;}
with (instance_create(800, 288, objBlock)){image_xscale = 1; image_yscale = 1;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate Coins + Pellets
instance_create(656, 496, objMakerCoin);
instance_create(624, 496, objMakerCoin);
instance_create(688, 496, objMakerCoin);
instance_create(752, 496, objMakerCoin);
instance_create(720, 496, objMakerCoin);
instance_create(752, 528, objMakerCoin);
instance_create(48, 528, objMakerCoin);
instance_create(752, 560, objMakerCoin);
instance_create(720, 560, objMakerCoin);
instance_create(688, 560, objMakerCoin);
instance_create(656, 560, objMakerCoin);
instance_create(624, 560, objMakerCoin);
instance_create(592, 560, objMakerCoin);
instance_create(560, 560, objMakerCoin);
instance_create(528, 560, objMakerCoin);
instance_create(496, 560, objMakerCoin);
instance_create(464, 560, objMakerCoin);
instance_create(432, 560, objMakerCoin);
instance_create(400, 560, objMakerCoin);
instance_create(368, 560, objMakerCoin);
instance_create(336, 560, objMakerCoin);
instance_create(304, 560, objMakerCoin);
instance_create(272, 560, objMakerCoin);
instance_create(240, 560, objMakerCoin);
instance_create(208, 560, objMakerCoin);
instance_create(176, 560, objMakerCoin);
instance_create(144, 560, objMakerCoin);
instance_create(112, 560, objMakerCoin);
instance_create(80, 560, objMakerCoin);
instance_create(48, 560, objMakerCoin);
instance_create(336, 528, objMakerCoin);
instance_create(464, 528, objMakerCoin);
instance_create(560, 464, objMakerCoin);
instance_create(560, 496, objMakerCoin);
instance_create(528, 496, objMakerCoin);
instance_create(496, 496, objMakerCoin);
instance_create(464, 496, objMakerCoin);
instance_create(336, 496, objMakerCoin);
instance_create(304, 496, objMakerCoin);
instance_create(272, 496, objMakerCoin);
instance_create(240, 496, objMakerCoin);
instance_create(240, 464, objMakerCoin);
instance_create(560, 432, objMakerCoin);
instance_create(528, 432, objMakerCoin);
instance_create(496, 432, objMakerCoin);
instance_create(464, 432, objMakerCoin);
instance_create(432, 432, objMakerCoin);
instance_create(400, 432, objMakerCoin);
instance_create(368, 432, objMakerCoin);
instance_create(336, 432, objMakerCoin);
instance_create(304, 432, objMakerCoin);
instance_create(272, 432, objMakerCoin);
instance_create(240, 432, objMakerCoin);
instance_create(80, 496, objMakerCoin);
instance_create(48, 496, objMakerCoin);
instance_create(144, 496, objMakerCoin);
instance_create(112, 496, objMakerCoin);
instance_create(112, 464, objMakerCoin);
instance_create(112, 432, objMakerCoin);
instance_create(176, 496, objMakerCoin);
instance_create(176, 464, objMakerCoin);
instance_create(176, 432, objMakerCoin);
instance_create(624, 464, objMakerCoin);
instance_create(624, 432, objMakerCoin);
instance_create(688, 464, objMakerCoin);
instance_create(688, 432, objMakerCoin);
instance_create(752, 400, objMakerCoin);
instance_create(688, 400, objMakerCoin);
instance_create(720, 400, objMakerCoin);
instance_create(624, 400, objMakerCoin);
instance_create(592, 400, objMakerCoin);
instance_create(560, 400, objMakerCoin);
instance_create(176, 400, objMakerCoin);
instance_create(560, 368, objMakerCoin);
instance_create(240, 368, objMakerCoin);
instance_create(240, 400, objMakerCoin);
instance_create(208, 400, objMakerCoin);
instance_create(112, 400, objMakerCoin);
instance_create(80, 400, objMakerCoin);
instance_create(48, 400, objMakerCoin);
instance_create(240, 336, objMakerCoin);
instance_create(208, 336, objMakerCoin);
instance_create(176, 336, objMakerCoin);
instance_create(144, 336, objMakerCoin);
instance_create(112, 336, objMakerCoin);
instance_create(80, 336, objMakerCoin);
instance_create(48, 336, objMakerCoin);
instance_create(752, 336, objMakerCoin);
instance_create(720, 336, objMakerCoin);
instance_create(688, 336, objMakerCoin);
instance_create(656, 336, objMakerCoin);
instance_create(624, 336, objMakerCoin);
instance_create(560, 336, objMakerCoin);
instance_create(592, 336, objMakerCoin);
instance_create(624, 304, objMakerCoin);
instance_create(560, 304, objMakerCoin);
instance_create(240, 304, objMakerCoin);
instance_create(176, 304, objMakerCoin);
instance_create(176, 240, objMakerCoin);
instance_create(176, 272, objMakerCoin);
instance_create(144, 272, objMakerCoin);
instance_create(112, 272, objMakerCoin);
instance_create(80, 272, objMakerCoin);
instance_create(48, 272, objMakerCoin);
instance_create(176, 208, objMakerCoin);
instance_create(144, 208, objMakerCoin);
instance_create(112, 208, objMakerCoin);
instance_create(80, 208, objMakerCoin);
instance_create(624, 240, objMakerCoin);
instance_create(752, 272, objMakerCoin);
instance_create(720, 272, objMakerCoin);
instance_create(688, 272, objMakerCoin);
instance_create(656, 272, objMakerCoin);
instance_create(624, 272, objMakerCoin);
instance_create(560, 272, objMakerCoin);
instance_create(528, 272, objMakerCoin);
instance_create(496, 272, objMakerCoin);
instance_create(464, 272, objMakerCoin);
instance_create(432, 272, objMakerCoin);
instance_create(400, 272, objMakerCoin);
instance_create(368, 272, objMakerCoin);
instance_create(336, 272, objMakerCoin);
instance_create(304, 272, objMakerCoin);
instance_create(272, 272, objMakerCoin);
instance_create(240, 272, objMakerCoin);
instance_create(432, 240, objMakerCoin);
instance_create(368, 240, objMakerCoin);
instance_create(432, 208, objMakerCoin);
instance_create(560, 208, objMakerCoin);
instance_create(528, 208, objMakerCoin);
instance_create(496, 208, objMakerCoin);
instance_create(464, 208, objMakerCoin);
instance_create(368, 208, objMakerCoin);
instance_create(336, 208, objMakerCoin);
instance_create(304, 208, objMakerCoin);
instance_create(272, 208, objMakerCoin);
instance_create(752, 208, objMakerCoin);
instance_create(720, 208, objMakerCoin);
instance_create(688, 208, objMakerCoin);
instance_create(656, 208, objMakerCoin);
instance_create(624, 208, objMakerCoin);
instance_create(752, 176, objMakerCoin);
instance_create(560, 176, objMakerCoin);
instance_create(240, 208, objMakerCoin);
instance_create(240, 176, objMakerCoin);
instance_create(752, 144, objMakerCoin);
instance_create(720, 144, objMakerCoin);
instance_create(688, 144, objMakerCoin);
instance_create(656, 144, objMakerCoin);
instance_create(624, 144, objMakerCoin);
instance_create(592, 144, objMakerCoin);
instance_create(560, 144, objMakerCoin);
instance_create(528, 144, objMakerCoin);
instance_create(496, 144, objMakerCoin);
instance_create(464, 144, objMakerCoin);
instance_create(432, 144, objMakerCoin);
instance_create(400, 144, objMakerCoin);
instance_create(368, 144, objMakerCoin);
instance_create(336, 144, objMakerCoin);
instance_create(304, 144, objMakerCoin);
instance_create(272, 144, objMakerCoin);
instance_create(240, 144, objMakerCoin);
instance_create(208, 144, objMakerCoin);
instance_create(176, 144, objMakerCoin);
instance_create(144, 144, objMakerCoin);
instance_create(112, 144, objMakerCoin);
instance_create(80, 144, objMakerCoin);
instance_create(176, 112, objMakerCoin);
instance_create(176, 80, objMakerCoin);
instance_create(368, 112, objMakerCoin);
instance_create(368, 80, objMakerCoin);
instance_create(752, 80, objMakerCoin);
instance_create(624, 112, objMakerCoin);
instance_create(624, 80, objMakerCoin);
instance_create(432, 112, objMakerCoin);
instance_create(432, 80, objMakerCoin);
instance_create(752, 48, objMakerCoin);
instance_create(720, 48, objMakerCoin);
instance_create(688, 48, objMakerCoin);
instance_create(656, 48, objMakerCoin);
instance_create(624, 48, objMakerCoin);
instance_create(592, 48, objMakerCoin);
instance_create(560, 48, objMakerCoin);
instance_create(528, 48, objMakerCoin);
instance_create(496, 48, objMakerCoin);
instance_create(464, 48, objMakerCoin);
instance_create(432, 48, objMakerCoin);
instance_create(368, 48, objMakerCoin);
instance_create(336, 48, objMakerCoin);
instance_create(304, 48, objMakerCoin);
instance_create(272, 48, objMakerCoin);
instance_create(240, 48, objMakerCoin);
instance_create(208, 48, objMakerCoin);
instance_create(176, 48, objMakerCoin);
instance_create(144, 48, objMakerCoin);
instance_create(112, 48, objMakerCoin);
instance_create(80, 48, objMakerCoin);
instance_create(48, 208, objMakerCoin);
instance_create(48, 176, objMakerCoin);
instance_create(48, 144, objMakerCoin);
instance_create(48, 80, objMakerCoin);
instance_create(48, 48, objMakerCoin);

//Power Pellets
instance_create(48, 112, objGeezerPacPower);
instance_create(752,112, objGeezerPacPower);
instance_create(48, 368, objGeezerPacPower);
instance_create(752,368, objGeezerPacPower);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.infJump = false;
if (surface_exists(playerGlowSurf)) surface_free(playerGlowSurf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (drawTiles){
    for(var i=0; i&lt;=474; i++;){
        if (block[i] != -1){
            t_tileLeft = (other.block[i] mod 8)*32;
            t_tileTop = (other.block[i] div 8)*32;
            draw_set_alpha(min(0.55, tileAlpha))
            draw_background_part(tlGeezerPacman, t_tileLeft, t_tileTop, 32, 32, (i mod 25)*32, (i div 25)*32);
        }
    }
}*/

// ghost gate
if (active){
    draw_set_color(c_white);
    draw_rectangle(384 + 0.5, 288 + 0.5, 416 - 0.5, 296 + 0.5, false);
    draw_set_alpha(1);
}
if (speedTimer &gt; 0 &amp;&amp; instance_exists(objPlayer)){
    if (!surface_exists(playerGlowSurf)){playerGlowSurf = surface_create(32, 32);}
    if (surface_exists(playerGlowSurf)){
        surface_set_target(playerGlowSurf);
        draw_clear_alpha(c_black, 0);
        with (objPlayer){ //Slightly modified draw code
            var drawX = 16;
            var drawY = 23;
            draw_sprite_ext(sprite_index,image_index,drawX,drawY,image_xscale*xScale,image_yscale*global.grav,image_angle,image_blend,1);
        }
        surface_reset_target();
        d3d_set_fog(true, speedColor, 0, 1);
        var _scale; _scale = 1;
        for(var i=1; i&lt;=3; i++;){
            _scale = (1 + (i/5)*sin(speedGlow));
            draw_surface_ext(playerGlowSurf, objPlayer.x - 16*_scale, objPlayer.y - 23*_scale, _scale, _scale, 0, c_black, 1 - 0.1*(i-1));
        }
        d3d_set_fog(false, c_white, 0, 1);
    }
}


/*  // Debug info - scatter state
if (global.debugMode){
    var _str; _str = "";
    _str += "Scatter: " + string(scatter);
    _str += "    ";
    _str += "totalTime: " + string(totalTime);
    if (scatterTimeIndex &lt; scatterTimeLen){
        _str += "    ";
        _str += "nextTime: " + string(scatterTime[scatterTimeIndex]);
    }
    
    draw_set_font(fDefault16);
    draw_set_color(c_red);
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    draw_text(400, 3, _str);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
